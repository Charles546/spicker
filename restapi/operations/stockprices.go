// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/Charles546/spicker/v2/models"
)

// StockpricesHandlerFunc turns a function with the right signature into a stockprices handler
type StockpricesHandlerFunc func(StockpricesParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StockpricesHandlerFunc) Handle(params StockpricesParams) middleware.Responder {
	return fn(params)
}

// StockpricesHandler interface for that can handle valid stockprices params
type StockpricesHandler interface {
	Handle(StockpricesParams) middleware.Responder
}

// NewStockprices creates a new http.Handler for the stockprices operation
func NewStockprices(ctx *middleware.Context, handler StockpricesHandler) *Stockprices {
	return &Stockprices{Context: ctx, Handler: handler}
}

/* Stockprices swagger:route GET /stockprices stockprices

Stockprices stockprices API

*/
type Stockprices struct {
	Context *middleware.Context
	Handler StockpricesHandler
}

func (o *Stockprices) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewStockpricesParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// StockpricesOKBody the stock prices
//
// swagger:model StockpricesOKBody
type StockpricesOKBody struct {

	// average closing price of the past N days
	// Example: 15.56
	// Required: true
	Average *float32 `json:"average"`

	// the history prices
	// Required: true
	History []*models.Stockprice `json:"history"`

	// the stock symbol
	// Example: QQQ
	// Required: true
	Symbol *string `json:"symbol"`
}

// Validate validates this stockprices o k body
func (o *StockpricesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateAverage(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSymbol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StockpricesOKBody) validateAverage(formats strfmt.Registry) error {

	if err := validate.Required("stockpricesOK"+"."+"average", "body", o.Average); err != nil {
		return err
	}

	return nil
}

func (o *StockpricesOKBody) validateHistory(formats strfmt.Registry) error {

	if err := validate.Required("stockpricesOK"+"."+"history", "body", o.History); err != nil {
		return err
	}

	for i := 0; i < len(o.History); i++ {
		if swag.IsZero(o.History[i]) { // not required
			continue
		}

		if o.History[i] != nil {
			if err := o.History[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stockpricesOK" + "." + "history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stockpricesOK" + "." + "history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *StockpricesOKBody) validateSymbol(formats strfmt.Registry) error {

	if err := validate.Required("stockpricesOK"+"."+"symbol", "body", o.Symbol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stockprices o k body based on the context it is used
func (o *StockpricesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *StockpricesOKBody) contextValidateHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.History); i++ {

		if o.History[i] != nil {
			if err := o.History[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("stockpricesOK" + "." + "history" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("stockpricesOK" + "." + "history" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *StockpricesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StockpricesOKBody) UnmarshalBinary(b []byte) error {
	var res StockpricesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
